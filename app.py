import streamlit as st
import openai
import random
import re
from collections import Counter

# Initialisation client OpenAI
client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Tarifs OpenAI juin 2025
MODELS = {
    "gpt-3.5-turbo": {"input": 0.0005, "output": 0.0015},
    "gpt-4o": {"input": 0.0025, "output": 0.01}
}

def estimer_cout(model, tokens_in, tokens_out):
    p = MODELS[model]
    return round((tokens_in / 1000) * p["input"] + (tokens_out / 1000) * p["output"], 6)

st.set_page_config(page_title="Test DISC", layout="centered")
st.title("üß† Test DISC ‚Äì Analyse de profil comportemental")

context = st.selectbox("Contexte", ["Professionnel", "Personnel", "√âquipe"])
langue = st.selectbox("Langue", ["Fran√ßais", "Anglais"])
niveau = st.selectbox("Niveau de langage", ["Grand public", "√âtudiant", "Manager"])
nb_questions = st.slider("Nombre de questions", 10, 28, 12)
model = st.selectbox("Mod√®le GPT utilis√©", list(MODELS.keys()))

# Estimation co√ªt
tokens_input = 1500
tokens_output = 4000
estimation = estimer_cout(model, tokens_input, tokens_output)
st.info(f"üí∞ Estimation du co√ªt API : ~${estimation} pour ce test complet ({model})")

if st.button("G√©n√©rer le questionnaire"):
    prompt_gen = f'''
Tu es un expert DISC. G√©n√©re {nb_questions} questions DISC dans le contexte {context.lower()}, en {langue.lower()}, pour un niveau {niveau.lower()}.

Pour chaque question, propose 4 affirmations. Chaque affirmation doit correspondre exactement √† un style DISC :
- Dominance (D)
- Influence (I)
- Stabilit√© (S)
- Conformit√© (C)

Ajoute discr√®tement √† la fin de chaque option le style entre double deux-points, exemple : "r√©ponse ici ::D".

Exemple de format :
Q1. Texte de la question ?
- R√©ponse 1 ::D
- R√©ponse 2 ::I
- R√©ponse 3 ::S
- R√©ponse 4 ::C

Fournis uniquement les questions et r√©ponses, sans explication.
'''
    with st.spinner("G√©n√©ration en cours..."):
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt_gen}]
        )
    questions_raw = response.choices[0].message.content.strip().split("\n\n")
    st.session_state["questions"] = questions_raw
    st.session_state["options_melangees"] = {}

if "questions" in st.session_state:
    st.markdown("## üìù <strong>R√©pondez au questionnaire</strong>", unsafe_allow_html=True)
    if "options_melangees" not in st.session_state:
        st.session_state["options_melangees"] = {}
    responses = []

    for i, bloc in enumerate(st.session_state["questions"]):
        lines = bloc.strip().split("\n")
        if len(lines) < 5:
            continue
        question_text = lines[0]
        options_raw = lines[1:5]

        options_cleaned = []
        for opt in options_raw:
            match = re.search(r"(.*)::([DISC])", opt.strip())
            if match:
                label = match.group(1).strip()
                style = match.group(2)
                options_cleaned.append({"text": label, "style": style})

        if f"q{i}" not in st.session_state["options_melangees"]:
            random.shuffle(options_cleaned)
            st.session_state["options_melangees"][f"q{i}"] = options_cleaned
        else:
            options_cleaned = st.session_state["options_melangees"][f"q{i}"]

        option_labels = [opt["text"] for opt in options_cleaned]

        st.markdown(f"<h4 style='margin-bottom: 0.5rem;'>‚ùì <strong>Question {i+1} :</strong> {question_text.strip()}</h4>", unsafe_allow_html=True)
        selection = st.radio(
            label=" ",
            options=option_labels,
            index=None,
            key=f"q{i}",
            label_visibility="collapsed"
        )
        st.markdown("---")

        for opt in options_cleaned:
            if opt["text"] == selection:
                responses.append(opt["style"])
                break

    if st.button("Analyser mes r√©ponses"):
        counts = Counter(responses)
        prompt_eval = f'''
Tu es un expert DISC. Voici les r√©ponses cod√©es d'un utilisateur √† un questionnaire DISC : {dict(counts)}

1. Indique le nombre de r√©ponses pour chaque style DISC (D, I, S, C).
2. D√©duis la couleur dominante.
3. Donne la couleur secondaire si elle existe.
4. R√©dige un profil synth√©tique (200-300 mots).
5. Fournis 3 conseils personnalis√©s selon ce profil.
'''
        with st.spinner("Analyse..."):
            result = client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt_eval}]
            )
        st.markdown("## üìä <strong>R√©sultat DISC</strong>", unsafe_allow_html=True)
        st.markdown(result.choices[0].message.content)